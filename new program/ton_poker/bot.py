from telegram.ext import Application, CommandHandler, CallbackQueryHandler, MessageHandler, filters
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, CallbackQuery
import asyncio
import logging
from datetime import datetime
from typing import Dict, List
import random
from game_logic import PokerTable
from prize_system import PrizeSystem
from poker_combinations import Card, PokerHand
from statistics import PlayerStatistics
from tournament_system import TournamentSystem
from chat_system import ChatSystem
from achievements import AchievementSystem
from notifications import NotificationSystem

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)

# –¢–æ–∫–µ–Ω –≤–∞—à–µ–≥–æ –±–æ—Ç–∞
TOKEN = "7334592326:AAHO5o_sw6sPoqKkdK_WMJumj1dtyaIcv0A"

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
PLAYERS: Dict[int, Dict] = {}
TOURNAMENTS: Dict[str, Dict] = {
    'sng_6': {
        'name': 'üî• Sit & Go (6 max)',
        'buy_in': 5,
        'players': [],
        'max_players': 6,
        'prize_pool': 0,
        'status': 'registering',
        'starting_chips': 1500,
    },
    'sng_9': {
        'name': 'üåü Sit & Go (9 max)',
        'buy_in': 10,
        'players': [],
        'max_players': 9,
        'prize_pool': 0,
        'status': 'registering',
        'starting_chips': 2000,
    }
}
ACTIVE_GAMES: Dict[str, PokerTable] = {}
PRIZE_SYSTEM = PrizeSystem()

# –°–∏—Å—Ç–µ–º–∞ —Ä–µ–π—Ç–∏–Ω–≥–∞
class RatingSystem:
    def __init__(self):
        self.ratings = {}
    
    def update_rating(self, user_id: int, tournament_result: Dict):
        if user_id not in self.ratings:
            self.ratings[user_id] = {
                'rating': 1000,
                'tournaments_played': 0,
                'tournaments_won': 0,
                'total_winnings': 0
            }
        
        player = self.ratings[user_id]
        player['tournaments_played'] += 1
        
        if tournament_result['position'] == 1:
            player['tournaments_won'] += 1
            player['rating'] += 50
        else:
            player['rating'] += max(0, 10 - tournament_result['position']) * 5
        
        player['total_winnings'] += tournament_result['prize']

# –°–∏—Å—Ç–µ–º–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
ACHIEVEMENT_SYSTEM = AchievementSystem()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
STATS = PlayerStatistics()

# –°–∏—Å—Ç–µ–º–∞ —Ç—É—Ä–Ω–∏—Ä–æ–≤
TOURNAMENT_SYSTEM = TournamentSystem()

# –°–∏—Å—Ç–µ–º–∞ —á–∞—Ç–∞
CHAT_SYSTEM = ChatSystem()

# –°–∏—Å—Ç–µ–º–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
NOTIFICATION_SYSTEM = None  # –ë—É–¥–µ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –≤ main()

async def start_command(update: Update, context):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    keyboard = [
        [
            InlineKeyboardButton("üéÆ –ò–≥—Ä–∞—Ç—å", callback_data="play"),
            InlineKeyboardButton("üí∞ –ë–∞–ª–∞–Ω—Å", callback_data="balance")
        ],
        [
            InlineKeyboardButton("üèÜ –¢—É—Ä–Ω–∏—Ä—ã", callback_data="tournaments"),
            InlineKeyboardButton("‚ÑπÔ∏è –ü–æ–º–æ—â—å", callback_data="help")
        ]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.message.reply_text(
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–∫–µ—Ä-–±–æ—Ç.\n"
        "üéÆ –í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=reply_markup
    )

async def button_handler(update: Update, context):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏"""
    query = update.callback_query
    await query.answer()  # –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback query
    
    if query.data == "play":
        await query.edit_message_text(
            "üéÆ –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∏–≥—Ä—ã:",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("üî• Sit & Go (6 max)", callback_data="sng_6")],
                [InlineKeyboardButton("üåü Sit & Go (9 max)", callback_data="sng_9")],
                [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_menu")]
            ])
        )
    elif query.data == "balance":
        await query.edit_message_text(
            "üí∞ –í–∞—à –±–∞–ª–∞–Ω—Å: 0 TON\n\n"
            "–î–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /deposit",
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_menu")
            ]])
        )
    elif query.data == "tournaments":
        await query.edit_message_text(
            "üèÜ –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç—É—Ä–Ω–∏—Ä—ã:\n\n"
            "–ü–æ–∫–∞ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ç—É—Ä–Ω–∏—Ä–æ–≤",
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_menu")
            ]])
        )
    elif query.data == "help":
        await query.edit_message_text(
            "‚ÑπÔ∏è –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
            "/start - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n"
            "/help - –ü–æ–º–æ—â—å\n"
            "/play - –ù–∞—á–∞—Ç—å –∏–≥—Ä—É\n"
            "/balance - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –±–∞–ª–∞–Ω—Å",
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton(" –ù–∞–∑–∞–¥", callback_data="back_to_menu")
            ]])
        )
    elif query.data == "back_to_menu":
        keyboard = [
            [
                InlineKeyboardButton("üéÆ –ò–≥—Ä–∞—Ç—å", callback_data="play"),
                InlineKeyboardButton("üí∞ –ë–∞–ª–∞–Ω—Å", callback_data="balance")
            ],
            [
                InlineKeyboardButton("üèÜ –¢—É—Ä–Ω–∏—Ä—ã", callback_data="tournaments"),
                InlineKeyboardButton("‚ÑπÔ∏è –ü–æ–º–æ—â—å", callback_data="help")
            ]
        ]
        await query.edit_message_text(
            "üëã –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n"
            "üéÆ –í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )

async def show_tournament_info(query, tournament_id):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç—É—Ä–Ω–∏—Ä–µ"""
    tournament = TOURNAMENTS[tournament_id]
    
    message = (
        f"üèÜ {tournament['name']}\n\n"
        f"üí∞ Buy-in: {tournament['buy_in']} TON\n"
        f"üë• –ò–≥—Ä–æ–∫–æ–≤: {len(tournament['players'])}/{tournament['max_players']}\n"
        f"üéØ –ü—Ä–∏–∑–æ–≤–æ–π —Ñ–æ–Ω–¥: {tournament['prize_pool']} TON\n"
        f"üíé –°—Ç–∞—Ä—Ç–æ–≤—ã–π —Å—Ç–µ–∫: {tournament['starting_chips']}\n\n"
        "–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∏–≥—Ä–æ–∫–∏:\n"
    )
    
    for player in tournament['players']:
        message += f"‚Ä¢ {player['username']}\n"
    
    keyboard = [
        [InlineKeyboardButton("‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è", callback_data=f"register_{tournament_id}")],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="tournaments")]
    ]
    
    await query.edit_message_text(
        message,
        reply_markup=InlineKeyboardMarkup(keyboard)
    )

async def register_tournament(query, tournament_id):
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤ —Ç—É—Ä–Ω–∏—Ä"""
    user_id = query.from_user.id
    username = query.from_user.username or f"Player_{user_id}"
    tournament = TOURNAMENTS[tournament_id]
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ª–∏ —É–∂–µ –∏–≥—Ä–æ–∫
    if any(p['user_id'] == user_id for p in tournament['players']):
        await query.answer("–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ —ç—Ç–æ—Ç —Ç—É—Ä–Ω–∏—Ä!", show_alert=True)
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–≥—Ä–æ–∫–æ–≤
    if len(tournament['players']) >= tournament['max_players']:
        await query.answer("–¢—É—Ä–Ω–∏—Ä —É–∂–µ –∑–∞–ø–æ–ª–Ω–µ–Ω!", show_alert=True)
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å (–∑–¥–µ—Å—å –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç –¥–±–∞–≤–∏—Ç—å —Ä–µ–∞–ª—å–Ω—É—é –ø—Ä–æ–≤–µ—Ä–∫—É)
    player_balance = PLAYERS.get(user_id, {}).get('balance', 0)
    if player_balance < tournament['buy_in']:
        await query.answer(
            f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—ÅÔøΩÔøΩ–≤! –ù–µ–æ–±—Ö–æ–¥–∏–º–æ: {tournament['buy_in']} TON",
            show_alert=True
        )
        return
    
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –∏–≥—Ä–æ–∫–∞
    tournament['players'].append({
        'user_id': user_id,
        'username': username,
        'registered_at': datetime.now()
    })
    tournament['prize_pool'] += tournament['buy_in']
    
    # –ï—Å–ª–∏ —Ç—É—Ä–Ω–∏—Ä –∑–∞–ø–æ–ª–Ω–µ–Ω, –Ω–∞—á–∏–Ω–∞–µ–º –µ–≥–æ
    if len(tournament['players']) >= tournament['max_players']:
        tournament['status'] = 'starting'
        # –ó–¥–µ—Å—å –±—É–¥–µ—Ç –ª–æ–≥–∏–∫–∞ –Ω–∞—á–∞–ª–∞ —Ç—É—Ä–Ω–∏—Ä–∞
    
    await show_tournament_info(query, tournament_id)

async def update_tournament_status(tournament_id: str, context):
    """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç—É—Å —Ç—É—Ä–Ω–∏—Ä–∞ –∏ –Ω–∞—á–∏–Ω–∞–µ—Ç –∏–≥—Ä—É –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏"""
    tournament = TOURNAMENTS[tournament_id]
    if len(tournament['players']) >= tournament['max_players']:
        tournament['status'] = 'starting'
        prizes = PRIZE_SYSTEM.calculate_prizes(tournament['buy_in'], len(tournament['players']))
        tournament['prizes'] = prizes
        await start_tournament_game(tournament_id, context)

async def start_tournament_game(tournament_id: str, context):
    """–ù–∞–∏–Ω–∞–µ—Ç –∏–≥—Ä—É –≤ —Ç—É—Ä–Ω–∏—Ä–µ"""
    tournament = TOURNAMENTS[tournament_id]
    table = PokerTable(tournament_id, tournament['players'])
    ACTIVE_GAMES[tournament_id] = table
    
    # –†–∞–∑–¥–∞–µ–º –∫–∞—Ä—Ç—ã –∏ –Ω–∞—á–∏–Ω–∞–µ–º –∏–≥—Ä—É
    table.deal_cards()
    
    # –£–≤–µ–¥–æ–º–ª—è–µ–º –≤—Å–µ—Ö –∏–≥—Ä–æ–∫–æ–≤
    for player in tournament['players']:
        user_id = player['user_id']
        player_cards = table.players[user_id]['cards']
        
        message = (
            "üéÆ –ò–≥—Ä–∞ –Ω–∞—á–∞–ª–∞—Å—å!\n\n"
            f"–í–∞—à–∏ –∫–∞—Ä—Ç—ã: {' '.join(str(card) for card in player_cards)}\n"
            f"–§–∏—à–∫–∏: {table.players[user_id]['chips']}"
        )
        
        keyboard = [
            [
                InlineKeyboardButton("‚úÖ –ß–µ–∫", callback_data=f"game_check_{tournament_id}"),
                InlineKeyboardButton("üìà –†–µ–π–∑", callback_data=f"game_raise_{tournament_id}"),
                InlineKeyboardButton("‚ùå –§–æ–ª–¥", callback_data=f"game_fold_{tournament_id}")
            ]
        ]
        
        try:
            await context.bot.send_message(
                user_id,
                message,
                reply_markup=InlineKeyboardMarkup(keyboard)
            )
        except Exception as e:
            print(f"Error sending message to {user_id}: {e}")

async def handle_game_action(query: CallbackQuery, action: str, tournament_id: str):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–≥—Ä–æ–≤—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π"""
    user_id = query.from_user.id
    table = ACTIVE_GAMES.get(tournament_id)
    
    if not table or user_id not in table.players:
        await query.answer("–ò–≥—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
        return
    
    player = table.players[user_id]
    
    if action == "check":
        if table.current_bet > 0:
            await query.answer("–ù–µ–ª—å–∑—è —Å–¥–µ–ª–∞—Ç—å —á–µ–∫!", show_alert=True)
            return
            
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        STATS.update_stats(user_id, 'hand_played', {
            'action': 'check',
            'hand_rank': table.evaluate_hand(user_id)['rank']
        })
        
        # –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –∏–≥—Ä–æ–∫—É
        await next_player_turn(table, tournament_id, context)
    
    elif action == "raise":
        possible_bets = []
        min_raise = max(table.big_blind, table.current_bet * 2)
        
        for multiplier in [1, 1.5, 2, 3]:
            bet = int(min_raise * multiplier)
            if bet <= player['chips']:
                possible_bets.append(bet)
        
        keyboard = []
        for bet in possible_bets:
            keyboard.append([InlineKeyboardButton(
                f"–ü–æ—Å—Ç–∞–≤–∏—Ç—å {bet}", 
                callback_data=f"game_bet_{tournament_id}_{bet}"
            )])
        
        keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data=f"game_back_{tournament_id}")])
        
        await query.edit_message_reply_markup(
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
    
    elif action == "fold":
        player['status'] = 'folded'
        STATS.update_stats(user_id, 'hand_played', {'action': 'fold'})
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ—Å—Ç–∞–ª—Å—è –ª–∏ –æ–¥–∏–Ω –∏–≥—Ä–æ–∫
        active_players = [p for p in table.players.values() if p['status'] == 'active']
        if len(active_players) == 1:
            await end_hand(table, tournament_id, context)
        else:
            await next_player_turn(table, tournament_id, context)

async def end_hand(table: PokerTable, tournament_id: str, context):
    """–ó–∞–≤–µ—Ä—à–∞–µ—Ç —Ä–∞–∑–¥–∞—á—É"""
    result = table.determine_winner()
    winner_id = result['winner_id']
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    STATS.update_stats(winner_id, 'hand_played', {
        'won': True,
        'pot': result['pot'],
        'hand_rank': result['hand']['rank'] if result['hand'] else 0,
        'hand_name': result['hand']['name'] if result['hand'] else 'Default win'
    })
    
    # –£–≤–µ–¥–æ–º–ª—è–µ–º –∏–≥—Ä–æ–∫–æ–≤
    for user_id in table.players:
        message = (
            f"üèÜ –ü–æ–±–µ–¥–∏—Ç–µ–ª—å: {table.players[winner_id]['username']}\n"
            f"üí∞ –ë–∞–Ω–∫: {result['pot']} —Ñ–∏—à–µ–∫\n"
        )
        if result['hand']:
            message += f"üÉè –ö–æ–º–±–∏–Ω–∞—Ü–∏—è: {result['hand']['name']}"
        
        try:
            await context.bot.send_message(user_id, message)
        except Exception as e:
            print(f"Error sending message to {user_id}: {e}")
    
    # –ù–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤—É—é —Ä–∞–∑–¥–∞—á—É
    await start_new_hand(table, tournament_id, context)

async def show_player_stats(query: CallbackQuery, user_id: int):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–≥—Ä–æ–∫–∞"""
    stats = STATS.get_player_stats(user_id)
    rating = RATING_SYSTEM.ratings.get(user_id, {'rating': 1000})
    achievements = ACHIEVEMENT_SYSTEM.player_achievements.get(user_id, [])
    
    message = (
        "üìä –í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n\n"
        f"üèÜ –†–µ–π—Ç–∏–Ω–≥: {rating['rating']}\n"
        f"üéÆ –¢—É—Ä–Ω–∏—Ä–æ–≤ —Å—ã–≥—Ä–∞–Ω–æ: {stats.get('tournaments_played', 0)}\n"
        f"üëë –¢—É—Ä–Ω–∏—Ä–æ–≤ –≤—ã–∏–≥—Ä–∞–Ω–æ: {stats.get('tournaments_won', 0)}\n"
        f"üí∞ –û–±—â–∏–π –≤—ã–∏–≥—Ä—ã—à: {stats.get('total_winnings', 0)} TON\n"
        f"üéØ –°—ã–≥—Ä–∞–Ω–æ —Ä–∞–∑–¥–∞—á: {stats.get('hands_played', 0)}\n"
        f"‚ú® –í—ã–∏–≥—Ä–∞–Ω–æ —Ä–∞–∑–¥–∞—á: {stats.get('hands_won', 0)}\n\n"
    )
    
    if stats.get('best_hand'):
        message += (
            "üÉè –õ—É—á—à–∞—è –∫–æ–º–±–∏–Ω–∞—Ü–∏—è:\n"
            f"{stats['best_hand']['name']}\n"
            f"–ü–æ–ª—É—á–µ–Ω–∞: {stats['best_hand']['date']}\n\n"
        )
    
    if achievements:
        message += "üèÖ –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è:\n"
        for achievement in achievements:
            ach_data = ACHIEVEMENT_SYSTEM.achievements[achievement]
            message += f"‚Ä¢ {ach_data['name']} - {ach_data['description']}\n"
    
    keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_menu")]]
    
    await query.edit_message_text(
        message,
        reply_markup=InlineKeyboardMarkup(keyboard)
    )

async def handle_bet(query: CallbackQuery, tournament_id: str, bet_amount: int):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å—Ç–∞–≤–∫—É –∏–≥—Ä–æ–∫–∞"""
    user_id = query.from_user.id
    table = ACTIVE_GAMES.get(tournament_id)
    
    if not table or user_id not in table.players:
        await query.answer("–ò–≥—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
        return
    
    player = table.players[user_id]
    result = table.place_bet(user_id, bet_amount)
    
    if result['status'] == 'success':
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        STATS.update_stats(user_id, 'hand_played', {
            'action': 'bet',
            'amount': bet_amount
        })
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –≤—Å–µ—Ö –∏–≥—Ä–æ–∫–æ–≤ –æ —Å—Ç–∞–≤–∫–µ
        for pid in table.players:
            try:
                await context.bot.send_message(
                    pid,
                    f"üí∞ {player['username']} —Å—Ç–∞–≤–∏—Ç {bet_amount} —Ñ–∏—à–µ–∫"
                )
            except Exception as e:
                print(f"Error sending message to {pid}: {e}")
        
        # –ï—Å–ª–∏ –∏–≥—Ä–æ–∫ –ø–æ—à–µ–ª –æ–ª–ª-–∏–Ω
        if result['is_all_in']:
            await handle_all_in(table, tournament_id, user_id, context)
        else:
            await next_player_turn(table, tournament_id, context)
    else:
        await query.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–º–µ—â–µ–Ω–∏–∏ —Å—Ç–∞–≤–∫–∏", show_alert=True)

async def handle_all_in(table: PokerTable, tournament_id: str, user_id: int, context):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–∏—Ç—É–∞—Ü–∏—é –æ–ª–ª-–∏–Ω–∞"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤—Å–µ –ª–∏ –∏–≥—Ä–æ–∫–∏ –≤ –æ–ª–ª-–∏–Ω–µ
    active_players = [p for p in table.players.values() if p['status'] == 'active']
    all_in_players = [p for p in table.players.values() if p['status'] == 'all-in']
    
    if len(active_players) == 0 or (len(active_players) == 1 and len(all_in_players) > 0):
        # –†–∞—Å–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ –æ—Å—Ç–∞–≤—à–∏–µ—Å—è –∫–∞—Ä—Ç—ã
        while len(table.community_cards) < 5:
            table.deal_community_cards(1)
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ–±–µ–¥–∏—Ç–µ–ª—è
        await end_hand(table, tournament_id, context)
    else:
        await next_player_turn(table, tournament_id, context)

async def handle_chat_message(update: Update, context):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç–µ —Ç—É—Ä–Ω–∏—Ä–∞"""
    message = update.message
    user_id = message.from_user.id
    
    # –ù–∞—Ö–æ–¥–∏–º –∞–∫—Ç–∏–≤–Ω—ã–π —Ç—É—Ä–Ω–∏—Ä –∏–≥—Ä–æ–∫–∞
    active_tournament = None
    for t_id, tournament in TOURNAMENT_SYSTEM.tournaments.items():
        if any(p['user_id'] == user_id for p in tournament['players']):
            active_tournament = tournament
            break
    
    if not active_tournament:
        return
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç
    CHAT_SYSTEM.add_message(
        active_tournament['id'],
        user_id,
        message.from_user.username,
        message.text
    )
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—Å–µ–º –∏–≥—Ä–æ–∫–∞–º —Ç—É—Ä–Ω–∏—Ä–∞
    for player in active_tournament['players']:
        if player['user_id'] != user_id:  # –ù–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—é
            try:
                await context.bot.send_message(
                    player['user_id'],
                    f"üí≠ {message.from_user.username}: {message.text}"
                )
            except Exception as e:
                print(f"Error sending message to {player['user_id']}: {e}")

async def show_tournament_chat(query: CallbackQuery, tournament_id: str):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —á–∞—Ç —Ç—É—Ä–Ω–∏—Ä–∞"""
    messages = CHAT_SYSTEM.get_messages(tournament_id)
    
    message = "üí≠ –ß–∞—Ç —Ç—É—Ä–Ω–∏—Ä–∞:\n\n"
    for msg in messages:
        message += f"@{msg['username']}: {msg['text']}\n"
    
    keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data=f"tournament_{tournament_id}")]]
    
    await query.edit_message_text(
        message,
        reply_markup=InlineKeyboardMarkup(keyboard)
    )

async def handle_achievement(user_id: int, event: str, data: Dict):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–æ–ª—É—á–µ–Ω–∏–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π"""
    earned_achievements = ACHIEVEMENT_SYSTEM.check_achievements(user_id, event, data)
    
    for achievement in earned_achievements:
        # –ù–∞—á–∏—Å–ª—è–µ–º –Ω–∞–≥—Ä–∞–¥—É
        PLAYERS[user_id]['balance'] += achievement.reward
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        await NOTIFICATION_SYSTEM.notify_achievement(user_id, achievement)

def main():
    global NOTIFICATION_SYSTEM
    
    app = Application.builder().token(TOKEN).build()
    NOTIFICATION_SYSTEM = NotificationSystem(app.bot)
    
    app.add_handler(CommandHandler("start", start_command))
    app.add_handler(CallbackQueryHandler(button_handler))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_chat_message))
    
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    app.run_polling(poll_interval=1)

if __name__ == "__main__":
    main()
